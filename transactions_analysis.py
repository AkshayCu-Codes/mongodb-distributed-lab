"""
MongoDB Distributed Systems Lab - Distributed Transactions Analysis
Part D: Conceptual comparison of ACID vs Saga patterns
"""

from pymongo import MongoClient
from pymongo.write_concern import WriteConcern
from pymongo.read_concern import ReadConcern
import time
from datetime import datetime

class TransactionAnalysis:
    def __init__(self):
        self.client = MongoClient(
            'mongodb://mongo1:27017/?directConnection=true',
            serverSelectionTimeoutMS=5000
        )
        self.db = self.client['distributed_lab']
    
    def demonstrate_acid_transaction(self):
        """
        Demonstrate ACID transaction concept for e-commerce order
        Note: Using simplified version without multi-document transactions
        """
        print("\n" + "=" * 70)
        print("DEMONSTRATION 1: ACID Transaction Pattern")
        print("=" * 70)
        
        print("\nüì¶ Scenario: E-commerce Order Processing")
        print("   Operations:")
        print("   1. Deduct inventory")
        print("   2. Create order record")
        print("   3. Process payment")
        print("   4. Update user account")
        
        # Setup collections
        inventory = self.db['Inventory']
        orders = self.db['Orders']
        payments = self.db['Payments']
        users = self.db['Users']
        
        # Initialize test data
        try:
            inventory.delete_many({})
            orders.delete_many({})
            payments.delete_many({})
            users.delete_many({})
        except:
            pass
        
        inventory.insert_one({'product_id': 'Mango', 'stock': 10})
        users.insert_one({'user_id': 'USER456', 'balance': 1000.0})
        
        print("\nüìã Initial State:")
        print(f"   - Product Mango: 10 units in stock")
        print(f"   - User USER456: $1000.00 balance")
        
        # Simulated ACID Transaction (conceptual)
        print("\nüîÑ Executing ACID Transaction (Conceptual)...")
        print("   Note: With directConnection, demonstrating concept without multi-doc transactions")
        
        try:
            # Step 1: Deduct inventory
            print("   [1/4] Deducting inventory...")
            result = inventory.update_one(
                {'product_id': 'Mango', 'stock': {'$gte': 1}},
                {'$inc': {'stock': -1}}
            )
            if result.modified_count == 0:
                raise Exception("Insufficient stock")
            
            # Step 2: Create order
            print("   [2/4] Creating order...")
            order_id = f"ORD{int(time.time())}"
            orders.insert_one({
                'order_id': order_id,
                'user_id': 'USER456',
                'product_id': 'Mango',
                'amount': 99.99,
                'status': 'confirmed',
                'timestamp': datetime.now()
            })
            
            # Step 3: Process payment
            print("   [3/4] Processing payment...")
            payments.insert_one({
                'payment_id': f"PAY{int(time.time())}",
                'order_id': order_id,
                'amount': 99.99,
                'status': 'completed'
            })
            
            # Step 4: Update user balance
            print("   [4/4] Updating user balance...")
            users.update_one(
                {'user_id': 'USER456'},
                {'$inc': {'balance': -99.99}}
            )
            
            print("   ‚úÖ All operations successful")
            
            # Verify final state
            final_inventory = inventory.find_one({'product_id': 'Mango'})
            final_user = users.find_one({'user_id': 'USER456'})
            
            print("\nüìä Final State:")
            print(f"   - Product Mango: {final_inventory['stock']} units in stock")
            print(f"   - User USER456: ${final_user['balance']:.2f} balance")
            print(f"   - Order created: {order_id}")
            
        except Exception as e:
            print(f"   ‚ùå Transaction failed: {e}")
            print("   üîÑ In a real ACID transaction, all changes would be rolled back")
            print("   ‚ÑπÔ∏è  Database would remain consistent")
        
        print("\nüí° ACID Properties:")
        print("   ‚úì Atomicity:    All-or-nothing execution")
        print("   ‚úì Consistency:  Database stays in valid state")
        print("   ‚úì Isolation:    Transactions don't interfere")
        print("   ‚úì Durability:   Committed data persists")
        
        print("\nüìà Advantages:")
        print("   + Strong consistency guarantees")
        print("   + Simple programming model")
        print("   + Automatic rollback on failure")
        
        print("\nüìâ Disadvantages:")
        print("   - Requires distributed transaction coordinator")
        print("   - Performance overhead (locks, 2PC)")
        print("   - Scalability limitations")
        print("   - May block during network partitions")
    
    def demonstrate_saga_pattern(self):
        """
        Demonstrate Saga pattern with compensating transactions
        Each step has a compensating action for rollback
        """
        print("\n" + "=" * 70)
        print("DEMONSTRATION 2: Saga Pattern (Compensating Transactions)")
        print("=" * 70)
        
        print("\nüì¶ Scenario: E-commerce Order Processing (Distributed)")
        print("   Saga Steps:")
        print("   1. Reserve inventory ‚Üí Compensate: Release reservation")
        print("   2. Create order ‚Üí Compensate: Cancel order")
        print("   3. Process payment ‚Üí Compensate: Refund payment")
        print("   4. Update user ‚Üí Compensate: Revert user update")
        
        # Setup collections
        inventory = self.db['SagaInventory']
        orders = self.db['SagaOrders']
        payments = self.db['SagaPayments']
        users = self.db['SagaUsers']
        saga_log = self.db['SagaLog']
        
        # Initialize test data
        try:
            inventory.delete_many({})
            orders.delete_many({})
            payments.delete_many({})
            users.delete_many({})
            saga_log.delete_many({})
        except:
            pass
        
        inventory.insert_one({'product_id': 'Mango', 'stock': 10, 'reserved': 0})
        users.insert_one({'user_id': 'USER456', 'balance': 1000.0})
        
        print("\nüìã Initial State:")
        print(f"   - Product Mango: 10 units available, 0 reserved")
        print(f"   - User USER456: $1000.00 balance")
        
        # Execute Saga
        print("\nüîÑ Executing Saga Transaction...")
        
        saga_id = f"SAGA{int(time.time())}"
        completed_steps = []
        
        try:
            # Step 1: Reserve inventory
            print("   [1/4] Reserving inventory...")
            result = inventory.update_one(
                {'product_id': 'Mango', 'stock': {'$gte': 1}},
                {'$inc': {'stock': -1, 'reserved': 1}}
            )
            if result.modified_count == 0:
                raise Exception("Insufficient stock")
            completed_steps.append('reserve_inventory')
            saga_log.insert_one({
                'saga_id': saga_id,
                'step': 'reserve_inventory',
                'status': 'completed',
                'timestamp': datetime.now()
            })
            time.sleep(0.1)  # Simulate network delay
            
            # Step 2: Create order
            print("   [2/4] Creating order...")
            order_id = f"ORD{int(time.time())}"
            orders.insert_one({
                'order_id': order_id,
                'user_id': 'USER456',
                'product_id': 'Mango',
                'amount': 99.99,
                'status': 'pending',
                'saga_id': saga_id
            })
            completed_steps.append('create_order')
            saga_log.insert_one({
                'saga_id': saga_id,
                'step': 'create_order',
                'status': 'completed',
                'order_id': order_id,
                'timestamp': datetime.now()
            })
            time.sleep(0.1)
            
            # Step 3: Process payment (simulate success or failure)
            print("   [3/4] Processing payment...")
            # Uncomment next line to simulate failure:
            # raise Exception("Payment gateway timeout")
            
            payments.insert_one({
                'payment_id': f"PAY{int(time.time())}",
                'order_id': order_id,
                'amount': 99.99,
                'status': 'completed',
                'saga_id': saga_id
            })
            completed_steps.append('process_payment')
            saga_log.insert_one({
                'saga_id': saga_id,
                'step': 'process_payment',
                'status': 'completed',
                'timestamp': datetime.now()
            })
            time.sleep(0.1)
            
            # Step 4: Update user
            print("   [4/4] Updating user balance...")
            users.update_one(
                {'user_id': 'USER456'},
                {'$inc': {'balance': -99.99}}
            )
            completed_steps.append('update_user')
            saga_log.insert_one({
                'saga_id': saga_id,
                'step': 'update_user',
                'status': 'completed',
                'timestamp': datetime.now()
            })
            
            # Mark saga complete
            orders.update_one(
                {'order_id': order_id},
                {'$set': {'status': 'confirmed'}}
            )
            inventory.update_one(
                {'product_id': 'Mango'},
                {'$inc': {'reserved': -1}}
            )
            
            print("   ‚úÖ SAGA COMPLETED SUCCESSFULLY")
            
            # Verify final state
            final_inventory = inventory.find_one({'product_id': 'Mango'})
            final_user = users.find_one({'user_id': 'USER456'})
            
            print("\nüìä Final State:")
            print(f"   - Product Mango: {final_inventory['stock']} units, {final_inventory['reserved']} reserved")
            print(f"   - User USER456: ${final_user['balance']:.2f} balance")
            print(f"   - Order: {order_id} (confirmed)")
            
        except Exception as e:
            print(f"   ‚ùå Saga step failed: {e}")
            print("   üîÑ EXECUTING COMPENSATING TRANSACTIONS...")
            
            # Compensate in reverse order
            for step in reversed(completed_steps):
                if step == 'update_user':
                    print("   ‚Ü©Ô∏è  Reverting user balance...")
                    users.update_one(
                        {'user_id': 'USER456'},
                        {'$inc': {'balance': 99.99}}
                    )
                
                elif step == 'process_payment':
                    print("   ‚Ü©Ô∏è  Refunding payment...")
                    payment = payments.find_one({'saga_id': saga_id})
                    if payment:
                        payments.update_one(
                            {'payment_id': payment['payment_id']},
                            {'$set': {'status': 'refunded'}}
                        )
                
                elif step == 'create_order':
                    print("   ‚Ü©Ô∏è  Cancelling order...")
                    orders.update_one(
                        {'saga_id': saga_id},
                        {'$set': {'status': 'cancelled'}}
                    )
                
                elif step == 'reserve_inventory':
                    print("   ‚Ü©Ô∏è  Releasing inventory reservation...")
                    inventory.update_one(
                        {'product_id': 'Mango'},
                        {'$inc': {'stock': 1, 'reserved': -1}}
                    )
                
                saga_log.insert_one({
                    'saga_id': saga_id,
                    'step': f'compensate_{step}',
                    'status': 'completed',
                    'timestamp': datetime.now()
                })
                time.sleep(0.05)
            
            print("   ‚úÖ COMPENSATION COMPLETED - System restored to consistent state")
        
        print("\nüí° Saga Pattern Characteristics:")
        print("   ‚úì Each step is independent transaction")
        print("   ‚úì Compensating actions for rollback")
        print("   ‚úì Eventual consistency")
        print("   ‚úì Better availability and scalability")
        
        print("\nüìà Advantages:")
        print("   + No distributed locks")
        print("   + Better scalability")
        print("   + Works across microservices")
        print("   + Tolerates network partitions")
        
        print("\nüìâ Disadvantages:")
        print("   - Complex to implement")
        print("   - Temporary inconsistency")
        print("   - Must design compensating transactions")
        print("   - Eventual consistency only")
    
    def comparison_analysis(self):
        """Print side-by-side comparison"""
        print("\n" + "=" * 70)
        print("COMPARISON: ACID vs Saga Pattern")
        print("=" * 70)
        
        print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ Characteristic      ‚îÇ ACID Transactions    ‚îÇ Saga Pattern         ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        print("‚îÇ Consistency Model   ‚îÇ Strong (Immediate)   ‚îÇ Eventual             ‚îÇ")
        print("‚îÇ Isolation           ‚îÇ Full isolation       ‚îÇ No isolation         ‚îÇ")
        print("‚îÇ Atomicity           ‚îÇ All-or-nothing       ‚îÇ Compensating actions ‚îÇ")
        print("‚îÇ Durability          ‚îÇ Guaranteed           ‚îÇ Guaranteed           ‚îÇ")
        print("‚îÇ Performance         ‚îÇ Slower (locks)       ‚îÇ Faster (no locks)    ‚îÇ")
        print("‚îÇ Scalability         ‚îÇ Limited              ‚îÇ High                 ‚îÇ")
        print("‚îÇ Complexity          ‚îÇ Low                  ‚îÇ High                 ‚îÇ")
        print("‚îÇ Failure Handling    ‚îÇ Automatic rollback   ‚îÇ Manual compensation  ‚îÇ")
        print("‚îÇ Cross-service       ‚îÇ Difficult            ‚îÇ Natural fit          ‚îÇ")
        print("‚îÇ Partition Tolerance ‚îÇ Lower                ‚îÇ Higher               ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        print("\nüéØ When to use ACID:")
        print("   ‚Ä¢ Financial transactions (banking, payments)")
        print("   ‚Ä¢ Inventory with strict accuracy requirements")
        print("   ‚Ä¢ Single database / monolithic architecture")
        print("   ‚Ä¢ Strong consistency is critical")
        
        print("\nüéØ When to use Saga:")
        print("   ‚Ä¢ Microservices architecture")
        print("   ‚Ä¢ Long-running business processes")
        print("   ‚Ä¢ High availability requirements")
        print("   ‚Ä¢ Cross-system workflows")
        print("   ‚Ä¢ Eventual consistency acceptable")
        
        print("\nüìä CAP Theorem Context:")
        print("   ACID:  Prioritizes Consistency (CP)")
        print("   Saga:  Prioritizes Availability (AP)")
    
    def close(self):
        if self.client:
            self.client.close()

def main():
    print("=" * 70)
    print("MongoDB Distributed Systems Lab - Transaction Patterns Analysis")
    print("=" * 70)
    
    analysis = TransactionAnalysis()
    
    try:
        analysis.demonstrate_acid_transaction()
        time.sleep(1)
        analysis.demonstrate_saga_pattern()
        time.sleep(1)
        analysis.comparison_analysis()
        
        print("\n" + "=" * 70)
        print("‚úÖ Transaction analysis completed!")
        print("=" * 70)
        
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Analysis interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        analysis.close()

if __name__ == "__main__":
    main()